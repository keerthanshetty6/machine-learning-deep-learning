{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-29T16:50:30.375548Z","iopub.execute_input":"2025-06-29T16:50:30.375742Z","iopub.status.idle":"2025-06-29T16:50:32.462438Z","shell.execute_reply.started":"2025-06-29T16:50:30.375725Z","shell.execute_reply":"2025-06-29T16:50:32.461616Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"from sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import GridSearchCV ,train_test_split\nfrom sklearn.metrics import classification_report,accuracy_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:16:48.689794Z","iopub.execute_input":"2025-06-29T17:16:48.690134Z","iopub.status.idle":"2025-06-29T17:16:48.706230Z","shell.execute_reply.started":"2025-06-29T17:16:48.690110Z","shell.execute_reply":"2025-06-29T17:16:48.705118Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"data = {}\n\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        if filename.endswith('.csv'):\n            filepath = os.path.join(dirname, filename)\n            var_name = os.path.splitext(filename)[0] \n            data[var_name] = pd.read_csv(filepath)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T16:50:38.399085Z","iopub.execute_input":"2025-06-29T16:50:38.399514Z","iopub.status.idle":"2025-06-29T16:50:38.437110Z","shell.execute_reply.started":"2025-06-29T16:50:38.399489Z","shell.execute_reply":"2025-06-29T16:50:38.436170Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"for name, df in data.items():\n    print(name, df.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T16:50:39.031831Z","iopub.execute_input":"2025-06-29T16:50:39.032172Z","iopub.status.idle":"2025-06-29T16:50:39.037239Z","shell.execute_reply.started":"2025-06-29T16:50:39.032148Z","shell.execute_reply":"2025-06-29T16:50:39.036359Z"}},"outputs":[{"name":"stdout","text":"train (891, 12)\ntest (418, 11)\ngender_submission (418, 2)\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"data['train'].head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T16:50:39.667890Z","iopub.execute_input":"2025-06-29T16:50:39.668190Z","iopub.status.idle":"2025-06-29T16:50:39.703037Z","shell.execute_reply.started":"2025-06-29T16:50:39.668168Z","shell.execute_reply":"2025-06-29T16:50:39.702128Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"data['test'].head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T16:50:40.366236Z","iopub.execute_input":"2025-06-29T16:50:40.366942Z","iopub.status.idle":"2025-06-29T16:50:40.379269Z","shell.execute_reply.started":"2025-06-29T16:50:40.366886Z","shell.execute_reply":"2025-06-29T16:50:40.378484Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n0  34.5      0      0   330911   7.8292   NaN        Q  \n1  47.0      1      0   363272   7.0000   NaN        S  \n2  62.0      0      0   240276   9.6875   NaN        Q  \n3  27.0      0      0   315154   8.6625   NaN        S  \n4  22.0      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"data['gender_submission']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T16:50:44.895074Z","iopub.execute_input":"2025-06-29T16:50:44.895400Z","iopub.status.idle":"2025-06-29T16:50:44.908572Z","shell.execute_reply.started":"2025-06-29T16:50:44.895377Z","shell.execute_reply":"2025-06-29T16:50:44.907768Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived\n0            892         0\n1            893         1\n2            894         0\n3            895         0\n4            896         1\n..           ...       ...\n413         1305         0\n414         1306         1\n415         1307         0\n416         1308         0\n417         1309         0\n\n[418 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>1305</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>1306</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>1307</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>1308</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>417</th>\n      <td>1309</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>418 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"data['train'].isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T16:50:45.943408Z","iopub.execute_input":"2025-06-29T16:50:45.943993Z","iopub.status.idle":"2025-06-29T16:50:45.950761Z","shell.execute_reply.started":"2025-06-29T16:50:45.943967Z","shell.execute_reply":"2025-06-29T16:50:45.950058Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"def preprocess_titanic(df, impute_age=None, impute_embarked=None,impute_fare=None, fit=True):\n    \n    df = df.copy()\n\n    if fit:\n        impute_age = SimpleImputer(strategy='median')\n        impute_fare = SimpleImputer(strategy='mean')\n        impute_embarked = SimpleImputer(strategy='most_frequent')\n        df['Age'] = impute_age.fit_transform(df[['Age']])\n        df['Embarked'] = impute_embarked.fit_transform(df[['Embarked']])[:, 0]\n        df['Fare'] = impute_fare.fit_transform(df[['Fare']])\n    else:\n        df['Age'] = impute_age.transform(df[['Age']])\n        df['Embarked'] = impute_embarked.transform(df[['Embarked']])[:, 0]\n        df['Fare'] = impute_fare.fit_transform(df[['Fare']])\n\n\n    df.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'], errors='ignore', inplace=True)\n\n\n    df = pd.get_dummies(df, columns=['Sex', 'Embarked'], drop_first=True)\n\n\n    df['FamilySize'] = df['SibSp'] + df['Parch']\n    df['IsAlone'] = (df['FamilySize'] == 0).astype(int)\n\n    return df, impute_age, impute_embarked,impute_fare","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:39:28.595326Z","iopub.execute_input":"2025-06-29T17:39:28.595998Z","iopub.status.idle":"2025-06-29T17:39:28.603031Z","shell.execute_reply.started":"2025-06-29T17:39:28.595965Z","shell.execute_reply":"2025-06-29T17:39:28.602183Z"}},"outputs":[],"execution_count":67},{"cell_type":"code","source":"train_df, age_imp, emb_imp ,fare_imp= preprocess_titanic(data['train'])\n\nX = train_df.drop(columns='Survived')\ny = train_df['Survived']\n\nX.head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:38:36.545763Z","iopub.execute_input":"2025-06-29T17:38:36.546404Z","iopub.status.idle":"2025-06-29T17:38:36.575592Z","shell.execute_reply.started":"2025-06-29T17:38:36.546376Z","shell.execute_reply":"2025-06-29T17:38:36.574843Z"}},"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"   Pclass   Age  SibSp  Parch     Fare  Sex_male  Embarked_Q  Embarked_S  \\\n0       3  22.0      1      0   7.2500      True       False        True   \n1       1  38.0      1      0  71.2833     False       False       False   \n2       3  26.0      0      0   7.9250     False       False        True   \n3       1  35.0      1      0  53.1000     False       False        True   \n4       3  35.0      0      0   8.0500      True       False        True   \n\n   FamilySize  IsAlone  \n0           1        0  \n1           1        0  \n2           0        1  \n3           1        0  \n4           0        1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Sex_male</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.2500</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>71.2833</td>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.9250</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>53.1000</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.0500</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":61},{"cell_type":"code","source":"\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, stratify=y,random_state=0)\n\nX_train = X_train.reset_index(drop=True)\nX_val = X_val.reset_index(drop=True)\ny_train = y_train.reset_index(drop=True)\ny_val = y_val.reset_index(drop=True)\n\nX_train.head(1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:37:28.043481Z","iopub.execute_input":"2025-06-29T17:37:28.043760Z","iopub.status.idle":"2025-06-29T17:37:28.062148Z","shell.execute_reply.started":"2025-06-29T17:37:28.043739Z","shell.execute_reply":"2025-06-29T17:37:28.060723Z"}},"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"   Pclass   Age  SibSp  Parch    Fare  Sex_male  Embarked_Q  Embarked_S  \\\n0       3  28.0      0      0  7.6292     False        True       False   \n\n   FamilySize  IsAlone  \n0           0        1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Sex_male</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.6292</td>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":52},{"cell_type":"code","source":"models = {\n    'LogisticRegression': LogisticRegression(max_iter=500),\n    'DecisionTree': DecisionTreeClassifier(),\n    'RandomForest': RandomForestClassifier(),\n    'GradientBoosting': GradientBoostingClassifier(),\n    'SVM': SVC(),\n    'NaiveBayes': GaussianNB()\n}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:37:31.419117Z","iopub.execute_input":"2025-06-29T17:37:31.419418Z","iopub.status.idle":"2025-06-29T17:37:31.424947Z","shell.execute_reply.started":"2025-06-29T17:37:31.419395Z","shell.execute_reply":"2025-06-29T17:37:31.423952Z"}},"outputs":[],"execution_count":53},{"cell_type":"code","source":"params = {\n    'n_estimators': [10,100, 200],\n    'max_depth': [2, 5, 10],\n    'min_samples_split': [2, 5,10]\n}\n\ngrid = GridSearchCV(estimator=RandomForestClassifier(random_state=0),\n                    param_grid=params,\n                    scoring='accuracy',\n                    cv=5,\n                    n_jobs=-1,\n                    verbose=4\n                    )\n\ngrid.fit(X_train, y_train)\n\nprint(\"Best Params:\", grid.best_params_)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:37:33.032347Z","iopub.execute_input":"2025-06-29T17:37:33.032645Z","iopub.status.idle":"2025-06-29T17:37:45.406163Z","shell.execute_reply.started":"2025-06-29T17:37:33.032622Z","shell.execute_reply":"2025-06-29T17:37:45.405355Z"}},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 27 candidates, totalling 135 fits\nBest Params: {'max_depth': 10, 'min_samples_split': 2, 'n_estimators': 200}\n","output_type":"stream"}],"execution_count":54},{"cell_type":"code","source":"y_pred = grid.predict(X_val)\nprint(\"\\nValidation Accuracy:\", accuracy_score(y_val, y_pred))\nprint(classification_report(y_val, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:37:45.407438Z","iopub.execute_input":"2025-06-29T17:37:45.407710Z","iopub.status.idle":"2025-06-29T17:37:45.435390Z","shell.execute_reply.started":"2025-06-29T17:37:45.407691Z","shell.execute_reply":"2025-06-29T17:37:45.434672Z"}},"outputs":[{"name":"stdout","text":"\nValidation Accuracy: 0.7932960893854749\n              precision    recall  f1-score   support\n\n           0       0.80      0.88      0.84       110\n           1       0.78      0.65      0.71        69\n\n    accuracy                           0.79       179\n   macro avg       0.79      0.77      0.77       179\nweighted avg       0.79      0.79      0.79       179\n\n","output_type":"stream"}],"execution_count":55},{"cell_type":"code","source":"results = []\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_val)\n    acc = accuracy_score(y_val, y_pred)\n    print(f\"📊 {name} Accuracy: {acc:.4f}\")\n    print(classification_report(y_val, y_pred, zero_division=0))\n    results.append((name, acc))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:37:45.436215Z","iopub.execute_input":"2025-06-29T17:37:45.436464Z","iopub.status.idle":"2025-06-29T17:37:47.265936Z","shell.execute_reply.started":"2025-06-29T17:37:45.436443Z","shell.execute_reply":"2025-06-29T17:37:47.265247Z"}},"outputs":[{"name":"stdout","text":"📊 LogisticRegression Accuracy: 0.7989\n              precision    recall  f1-score   support\n\n           0       0.80      0.89      0.84       110\n           1       0.79      0.65      0.71        69\n\n    accuracy                           0.80       179\n   macro avg       0.80      0.77      0.78       179\nweighted avg       0.80      0.80      0.79       179\n\n📊 DecisionTree Accuracy: 0.7207\n              precision    recall  f1-score   support\n\n           0       0.78      0.76      0.77       110\n           1       0.63      0.65      0.64        69\n\n    accuracy                           0.72       179\n   macro avg       0.71      0.71      0.71       179\nweighted avg       0.72      0.72      0.72       179\n\n📊 RandomForest Accuracy: 0.7765\n              precision    recall  f1-score   support\n\n           0       0.79      0.86      0.83       110\n           1       0.75      0.64      0.69        69\n\n    accuracy                           0.78       179\n   macro avg       0.77      0.75      0.76       179\nweighted avg       0.77      0.78      0.77       179\n\n📊 GradientBoosting Accuracy: 0.8492\n              precision    recall  f1-score   support\n\n           0       0.83      0.95      0.89       110\n           1       0.89      0.70      0.78        69\n\n    accuracy                           0.85       179\n   macro avg       0.86      0.82      0.83       179\nweighted avg       0.85      0.85      0.84       179\n\n📊 SVM Accuracy: 0.6257\n              precision    recall  f1-score   support\n\n           0       0.65      0.86      0.74       110\n           1       0.53      0.25      0.34        69\n\n    accuracy                           0.63       179\n   macro avg       0.59      0.56      0.54       179\nweighted avg       0.60      0.63      0.58       179\n\n📊 NaiveBayes Accuracy: 0.7709\n              precision    recall  f1-score   support\n\n           0       0.80      0.84      0.82       110\n           1       0.72      0.67      0.69        69\n\n    accuracy                           0.77       179\n   macro avg       0.76      0.75      0.75       179\nweighted avg       0.77      0.77      0.77       179\n\n","output_type":"stream"}],"execution_count":56},{"cell_type":"code","source":"results_df = pd.DataFrame(results, columns=['Model', 'Accuracy']).sort_values(by='Accuracy', ascending=False)\nprint(results_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:37:47.267349Z","iopub.execute_input":"2025-06-29T17:37:47.267595Z","iopub.status.idle":"2025-06-29T17:37:47.275667Z","shell.execute_reply.started":"2025-06-29T17:37:47.267575Z","shell.execute_reply":"2025-06-29T17:37:47.274744Z"}},"outputs":[{"name":"stdout","text":"                Model  Accuracy\n3    GradientBoosting  0.849162\n0  LogisticRegression  0.798883\n2        RandomForest  0.776536\n5          NaiveBayes  0.770950\n1        DecisionTree  0.720670\n4                 SVM  0.625698\n","output_type":"stream"}],"execution_count":57},{"cell_type":"code","source":"param_grid = {\n    'n_estimators': [100, 150, 200],\n    'learning_rate': [0.05, 0.1, 0.2],\n    'max_depth': [3, 4, 5]\n}\n\ngrid = GridSearchCV(\n    estimator=GradientBoostingClassifier(random_state=42),\n    param_grid=param_grid,\n    cv=5,\n    scoring='accuracy',\n    verbose=2,\n    n_jobs=-1\n)\n\ngrid.fit(X, y)\n\nprint(\"Best Parameters:\", grid.best_params_)\nprint(\"Best Cross-Validation Accuracy:\", grid.best_score_)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:37:47.276600Z","iopub.execute_input":"2025-06-29T17:37:47.277222Z","iopub.status.idle":"2025-06-29T17:38:00.489859Z","shell.execute_reply.started":"2025-06-29T17:37:47.277191Z","shell.execute_reply":"2025-06-29T17:38:00.489058Z"}},"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 27 candidates, totalling 135 fits\nBest Parameters: {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 200}\nBest Cross-Validation Accuracy: 0.8384031134266523\n","output_type":"stream"}],"execution_count":58},{"cell_type":"code","source":"final_model = grid.best_estimator_\nfinal_model.fit(X, y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:38:00.490646Z","iopub.execute_input":"2025-06-29T17:38:00.490866Z","iopub.status.idle":"2025-06-29T17:38:00.740986Z","shell.execute_reply.started":"2025-06-29T17:38:00.490847Z","shell.execute_reply":"2025-06-29T17:38:00.740144Z"}},"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"GradientBoostingClassifier(n_estimators=200, random_state=42)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingClassifier(n_estimators=200, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingClassifier</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingClassifier(n_estimators=200, random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":59},{"cell_type":"code","source":"test_df, _, _,_ = preprocess_titanic(data['test'], impute_age=age_imp, impute_embarked=emb_imp,impute_fare=fare_imp, fit=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:39:35.474477Z","iopub.execute_input":"2025-06-29T17:39:35.474741Z","iopub.status.idle":"2025-06-29T17:39:35.492003Z","shell.execute_reply.started":"2025-06-29T17:39:35.474722Z","shell.execute_reply":"2025-06-29T17:39:35.491106Z"}},"outputs":[],"execution_count":68},{"cell_type":"code","source":"test_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:39:36.034943Z","iopub.execute_input":"2025-06-29T17:39:36.035248Z","iopub.status.idle":"2025-06-29T17:39:36.046767Z","shell.execute_reply.started":"2025-06-29T17:39:36.035227Z","shell.execute_reply":"2025-06-29T17:39:36.045989Z"}},"outputs":[{"execution_count":69,"output_type":"execute_result","data":{"text/plain":"   Pclass   Age  SibSp  Parch     Fare  Sex_male  Embarked_Q  Embarked_S  \\\n0       3  34.5      0      0   7.8292      True        True       False   \n1       3  47.0      1      0   7.0000     False       False        True   \n2       2  62.0      0      0   9.6875      True        True       False   \n3       3  27.0      0      0   8.6625      True       False        True   \n4       3  22.0      1      1  12.2875     False       False        True   \n\n   FamilySize  IsAlone  \n0           0        1  \n1           1        0  \n2           0        1  \n3           0        1  \n4           2        0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n      <th>Sex_male</th>\n      <th>Embarked_Q</th>\n      <th>Embarked_S</th>\n      <th>FamilySize</th>\n      <th>IsAlone</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7.8292</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>7.0000</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9.6875</td>\n      <td>True</td>\n      <td>True</td>\n      <td>False</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8.6625</td>\n      <td>True</td>\n      <td>False</td>\n      <td>True</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>12.2875</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":69},{"cell_type":"code","source":"for col in X.columns:\n    if col not in test_df.columns:\n        test_df[col] = 0\n        print(col)\ntest_df = test_df[X.columns]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:39:37.027359Z","iopub.execute_input":"2025-06-29T17:39:37.027641Z","iopub.status.idle":"2025-06-29T17:39:37.033263Z","shell.execute_reply.started":"2025-06-29T17:39:37.027621Z","shell.execute_reply":"2025-06-29T17:39:37.032473Z"}},"outputs":[],"execution_count":70},{"cell_type":"code","source":"test_df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:39:38.784937Z","iopub.execute_input":"2025-06-29T17:39:38.785669Z","iopub.status.idle":"2025-06-29T17:39:38.792405Z","shell.execute_reply.started":"2025-06-29T17:39:38.785644Z","shell.execute_reply":"2025-06-29T17:39:38.791595Z"}},"outputs":[{"execution_count":71,"output_type":"execute_result","data":{"text/plain":"Pclass        0\nAge           0\nSibSp         0\nParch         0\nFare          0\nSex_male      0\nEmbarked_Q    0\nEmbarked_S    0\nFamilySize    0\nIsAlone       0\ndtype: int64"},"metadata":{}}],"execution_count":71},{"cell_type":"code","source":"test_preds = final_model.predict(test_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:39:39.567784Z","iopub.execute_input":"2025-06-29T17:39:39.568725Z","iopub.status.idle":"2025-06-29T17:39:39.576854Z","shell.execute_reply.started":"2025-06-29T17:39:39.568693Z","shell.execute_reply":"2025-06-29T17:39:39.576041Z"}},"outputs":[],"execution_count":72},{"cell_type":"code","source":"test_preds","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:39:44.382728Z","iopub.execute_input":"2025-06-29T17:39:44.383162Z","iopub.status.idle":"2025-06-29T17:39:44.389128Z","shell.execute_reply.started":"2025-06-29T17:39:44.383131Z","shell.execute_reply":"2025-06-29T17:39:44.388388Z"}},"outputs":[{"execution_count":73,"output_type":"execute_result","data":{"text/plain":"array([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1,\n       1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1,\n       1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,\n       1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0,\n       1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n       0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1,\n       0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,\n       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,\n       0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0,\n       1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n       1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1,\n       0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n       0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0,\n       1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0,\n       0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0,\n       1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,\n       0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0])"},"metadata":{}}],"execution_count":73},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'PassengerId': data['test']['PassengerId'],\n    'Survived': test_preds\n})\n\nsubmission.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:40:52.716483Z","iopub.execute_input":"2025-06-29T17:40:52.716832Z","iopub.status.idle":"2025-06-29T17:40:52.725831Z","shell.execute_reply.started":"2025-06-29T17:40:52.716807Z","shell.execute_reply":"2025-06-29T17:40:52.725031Z"}},"outputs":[{"execution_count":74,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived\n0          892         0\n1          893         0\n2          894         0\n3          895         0\n4          896         0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":74},{"cell_type":"code","source":"submission.to_csv('submission.csv', index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T17:41:02.380359Z","iopub.execute_input":"2025-06-29T17:41:02.381082Z","iopub.status.idle":"2025-06-29T17:41:02.391073Z","shell.execute_reply.started":"2025-06-29T17:41:02.381040Z","shell.execute_reply":"2025-06-29T17:41:02.390139Z"}},"outputs":[{"name":"stdout","text":"[CV 1/5] END max_depth=2, min_samples_split=2, n_estimators=10;, score=0.797 total time=   0.0s\n[CV 5/5] END max_depth=2, min_samples_split=2, n_estimators=10;, score=0.831 total time=   0.0s\n[CV 4/5] END max_depth=2, min_samples_split=2, n_estimators=100;, score=0.761 total time=   0.3s\n[CV 3/5] END max_depth=2, min_samples_split=2, n_estimators=200;, score=0.796 total time=   0.5s\n[CV 2/5] END max_depth=2, min_samples_split=5, n_estimators=10;, score=0.783 total time=   0.1s\n[CV 4/5] END max_depth=2, min_samples_split=5, n_estimators=10;, score=0.782 total time=   0.0s\n[CV 1/5] END max_depth=2, min_samples_split=5, n_estimators=100;, score=0.790 total time=   0.3s\n[CV 4/5] END max_depth=2, min_samples_split=5, n_estimators=100;, score=0.761 total time=   0.3s\n[CV 3/5] END max_depth=2, min_samples_split=5, n_estimators=200;, score=0.796 total time=   0.6s\n[CV 3/5] END max_depth=2, min_samples_split=10, n_estimators=10;, score=0.803 total time=   0.0s\n[CV 5/5] END max_depth=2, min_samples_split=10, n_estimators=10;, score=0.831 total time=   0.0s\n[CV 2/5] END max_depth=2, min_samples_split=10, n_estimators=100;, score=0.818 total time=   0.3s\n[CV 5/5] END max_depth=2, min_samples_split=10, n_estimators=100;, score=0.817 total time=   0.3s\n[CV 4/5] END max_depth=2, min_samples_split=10, n_estimators=200;, score=0.761 total time=   0.5s\n[CV 3/5] END max_depth=5, min_samples_split=2, n_estimators=10;, score=0.845 total time=   0.0s\n[CV 1/5] END max_depth=5, min_samples_split=2, n_estimators=100;, score=0.825 total time=   0.3s\n[CV 4/5] END max_depth=5, min_samples_split=2, n_estimators=100;, score=0.775 total time=   0.3s\n[CV 3/5] END max_depth=5, min_samples_split=2, n_estimators=200;, score=0.852 total time=   0.5s\n[CV 2/5] END max_depth=5, min_samples_split=5, n_estimators=100;, score=0.818 total time=   0.3s\n[CV 5/5] END max_depth=5, min_samples_split=5, n_estimators=100;, score=0.824 total time=   0.3s\n[CV 4/5] END max_depth=5, min_samples_split=5, n_estimators=200;, score=0.782 total time=   0.6s\n[CV 2/5] END max_depth=5, min_samples_split=10, n_estimators=100;, score=0.818 total time=   0.3s\n[CV 5/5] END max_depth=5, min_samples_split=10, n_estimators=100;, score=0.817 total time=   0.3s\n[CV 4/5] END max_depth=5, min_samples_split=10, n_estimators=200;, score=0.782 total time=   0.6s\n[CV 3/5] END max_depth=10, min_samples_split=2, n_estimators=100;, score=0.810 total time=   0.3s\n[CV 1/5] END max_depth=10, min_samples_split=2, n_estimators=200;, score=0.853 total time=   0.6s\n[CV 5/5] END max_depth=10, min_samples_split=2, n_estimators=200;, score=0.810 total time=   0.6s\n[CV 2/5] END max_depth=10, min_samples_split=5, n_estimators=200;, score=0.818 total time=   0.6s\n[CV 1/5] END max_depth=10, min_samples_split=10, n_estimators=10;, score=0.825 total time=   0.0s\n[CV 2/5] END max_depth=10, min_samples_split=10, n_estimators=10;, score=0.818 total time=   0.0s\n[CV 3/5] END max_depth=10, min_samples_split=10, n_estimators=10;, score=0.796 total time=   0.0s\n[CV 4/5] END max_depth=10, min_samples_split=10, n_estimators=10;, score=0.789 total time=   0.0s\n[CV 5/5] END max_depth=10, min_samples_split=10, n_estimators=10;, score=0.817 total time=   0.0s\n[CV 1/5] END max_depth=10, min_samples_split=10, n_estimators=100;, score=0.839 total time=   0.3s\n[CV 4/5] END max_depth=10, min_samples_split=10, n_estimators=100;, score=0.775 total time=   0.3s\n[CV 3/5] END max_depth=10, min_samples_split=10, n_estimators=200;, score=0.838 total time=   0.6s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=150; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=200; total time=   0.4s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=200; total time=   0.4s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=150; total time=   0.4s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=150; total time=   0.4s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=100; total time=   0.4s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=150; total time=   0.5s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=150; total time=   0.4s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=200; total time=   0.7s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=150; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=200; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=150; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=150; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.6s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.6s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=200; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=150; total time=   0.4s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=200; total time=   0.6s\n[CV 4/5] END max_depth=2, min_samples_split=2, n_estimators=10;, score=0.782 total time=   0.0s\n[CV 3/5] END max_depth=2, min_samples_split=2, n_estimators=100;, score=0.803 total time=   0.3s\n[CV 2/5] END max_depth=2, min_samples_split=2, n_estimators=200;, score=0.804 total time=   0.5s\n[CV 1/5] END max_depth=2, min_samples_split=5, n_estimators=10;, score=0.797 total time=   0.0s\n[CV 3/5] END max_depth=2, min_samples_split=5, n_estimators=10;, score=0.803 total time=   0.0s\n[CV 5/5] END max_depth=2, min_samples_split=5, n_estimators=10;, score=0.831 total time=   0.0s\n[CV 2/5] END max_depth=2, min_samples_split=5, n_estimators=100;, score=0.811 total time=   0.3s\n[CV 5/5] END max_depth=2, min_samples_split=5, n_estimators=100;, score=0.817 total time=   0.3s\n[CV 4/5] END max_depth=2, min_samples_split=5, n_estimators=200;, score=0.761 total time=   0.5s\n[CV 4/5] END max_depth=2, min_samples_split=10, n_estimators=10;, score=0.782 total time=   0.0s\n[CV 1/5] END max_depth=2, min_samples_split=10, n_estimators=100;, score=0.790 total time=   0.4s\n[CV 1/5] END max_depth=2, min_samples_split=10, n_estimators=200;, score=0.783 total time=   0.6s\n[CV 5/5] END max_depth=2, min_samples_split=10, n_estimators=200;, score=0.810 total time=   0.5s\n[CV 2/5] END max_depth=5, min_samples_split=2, n_estimators=200;, score=0.825 total time=   0.5s\n[CV 1/5] END max_depth=5, min_samples_split=5, n_estimators=10;, score=0.804 total time=   0.0s\n[CV 2/5] END max_depth=5, min_samples_split=5, n_estimators=10;, score=0.797 total time=   0.0s\n[CV 3/5] END max_depth=5, min_samples_split=5, n_estimators=10;, score=0.838 total time=   0.0s\n[CV 4/5] END max_depth=5, min_samples_split=5, n_estimators=10;, score=0.796 total time=   0.0s\n[CV 5/5] END max_depth=5, min_samples_split=5, n_estimators=10;, score=0.796 total time=   0.0s\n[CV 1/5] END max_depth=5, min_samples_split=5, n_estimators=100;, score=0.825 total time=   0.3s\n[CV 4/5] END max_depth=5, min_samples_split=5, n_estimators=100;, score=0.775 total time=   0.4s\n[CV 3/5] END max_depth=5, min_samples_split=5, n_estimators=200;, score=0.859 total time=   0.6s\n[CV 3/5] END max_depth=5, min_samples_split=10, n_estimators=100;, score=0.845 total time=   0.3s\n[CV 1/5] END max_depth=5, min_samples_split=10, n_estimators=200;, score=0.825 total time=   0.5s\n[CV 5/5] END max_depth=5, min_samples_split=10, n_estimators=200;, score=0.817 total time=   0.6s\n[CV 2/5] END max_depth=10, min_samples_split=2, n_estimators=200;, score=0.818 total time=   0.6s\n[CV 1/5] END max_depth=10, min_samples_split=5, n_estimators=10;, score=0.839 total time=   0.0s\n[CV 2/5] END max_depth=10, min_samples_split=5, n_estimators=10;, score=0.832 total time=   0.0s\n[CV 3/5] END max_depth=10, min_samples_split=5, n_estimators=10;, score=0.796 total time=   0.0s\n[CV 4/5] END max_depth=10, min_samples_split=5, n_estimators=10;, score=0.782 total time=   0.0s\n[CV 5/5] END max_depth=10, min_samples_split=5, n_estimators=10;, score=0.817 total time=   0.0s\n[CV 2/5] END max_depth=10, min_samples_split=5, n_estimators=100;, score=0.825 total time=   0.3s\n[CV 5/5] END max_depth=10, min_samples_split=5, n_estimators=100;, score=0.817 total time=   0.3s\n[CV 4/5] END max_depth=10, min_samples_split=5, n_estimators=200;, score=0.775 total time=   0.6s\n[CV 3/5] END max_depth=10, min_samples_split=10, n_estimators=100;, score=0.845 total time=   0.3s\n[CV 1/5] END max_depth=10, min_samples_split=10, n_estimators=200;, score=0.832 total time=   0.6s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=150; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=150; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=150; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=100; total time=   0.4s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=150; total time=   0.5s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=150; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=150; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=150; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=100; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=150; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=150; total time=   0.5s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=150; total time=   0.5s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=200; total time=   0.6s\n[CV 3/5] END max_depth=2, min_samples_split=2, n_estimators=10;, score=0.803 total time=   0.0s\n[CV 1/5] END max_depth=2, min_samples_split=2, n_estimators=100;, score=0.790 total time=   0.3s\n[CV 5/5] END max_depth=2, min_samples_split=2, n_estimators=100;, score=0.817 total time=   0.3s\n[CV 4/5] END max_depth=2, min_samples_split=2, n_estimators=200;, score=0.761 total time=   0.6s\n[CV 3/5] END max_depth=2, min_samples_split=5, n_estimators=100;, score=0.803 total time=   0.3s\n[CV 1/5] END max_depth=2, min_samples_split=5, n_estimators=200;, score=0.783 total time=   0.6s\n[CV 5/5] END max_depth=2, min_samples_split=5, n_estimators=200;, score=0.810 total time=   0.6s\n[CV 2/5] END max_depth=2, min_samples_split=10, n_estimators=200;, score=0.811 total time=   0.6s\n[CV 1/5] END max_depth=5, min_samples_split=2, n_estimators=10;, score=0.783 total time=   0.0s\n[CV 2/5] END max_depth=5, min_samples_split=2, n_estimators=10;, score=0.811 total time=   0.0s\n[CV 5/5] END max_depth=5, min_samples_split=2, n_estimators=10;, score=0.803 total time=   0.0s\n[CV 3/5] END max_depth=5, min_samples_split=2, n_estimators=100;, score=0.845 total time=   0.3s\n[CV 1/5] END max_depth=5, min_samples_split=2, n_estimators=200;, score=0.825 total time=   0.5s\n[CV 5/5] END max_depth=5, min_samples_split=2, n_estimators=200;, score=0.817 total time=   0.5s\n[CV 1/5] END max_depth=5, min_samples_split=5, n_estimators=200;, score=0.818 total time=   0.7s\n[CV 1/5] END max_depth=5, min_samples_split=10, n_estimators=10;, score=0.804 total time=   0.0s\n[CV 2/5] END max_depth=5, min_samples_split=10, n_estimators=10;, score=0.804 total time=   0.0s\n[CV 3/5] END max_depth=5, min_samples_split=10, n_estimators=10;, score=0.838 total time=   0.0s\n[CV 4/5] END max_depth=5, min_samples_split=10, n_estimators=10;, score=0.775 total time=   0.0s\n[CV 5/5] END max_depth=5, min_samples_split=10, n_estimators=10;, score=0.803 total time=   0.1s\n[CV 1/5] END max_depth=5, min_samples_split=10, n_estimators=100;, score=0.818 total time=   0.3s\n[CV 4/5] END max_depth=5, min_samples_split=10, n_estimators=100;, score=0.775 total time=   0.3s\n[CV 3/5] END max_depth=5, min_samples_split=10, n_estimators=200;, score=0.845 total time=   0.5s\n[CV 1/5] END max_depth=10, min_samples_split=2, n_estimators=100;, score=0.860 total time=   0.3s\n[CV 4/5] END max_depth=10, min_samples_split=2, n_estimators=100;, score=0.803 total time=   0.3s\n[CV 3/5] END max_depth=10, min_samples_split=2, n_estimators=200;, score=0.817 total time=   0.6s\n[CV 1/5] END max_depth=10, min_samples_split=5, n_estimators=100;, score=0.846 total time=   0.3s\n[CV 4/5] END max_depth=10, min_samples_split=5, n_estimators=100;, score=0.775 total time=   0.3s\n[CV 3/5] END max_depth=10, min_samples_split=5, n_estimators=200;, score=0.817 total time=   0.6s\n[CV 2/5] END max_depth=10, min_samples_split=10, n_estimators=100;, score=0.818 total time=   0.3s\n[CV 5/5] END max_depth=10, min_samples_split=10, n_estimators=100;, score=0.817 total time=   0.3s\n[CV 4/5] END max_depth=10, min_samples_split=10, n_estimators=200;, score=0.782 total time=   0.6s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=150; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=200; total time=   0.4s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=150; total time=   0.5s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=200; total time=   0.6s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=200; total time=   0.9s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.6s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=150; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=150; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.6s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=200; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=200; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=150; total time=   0.5s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=150; total time=   0.4s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=200; total time=   0.6s\n[CV 2/5] END max_depth=2, min_samples_split=2, n_estimators=10;, score=0.783 total time=   0.0s\n[CV 2/5] END max_depth=2, min_samples_split=2, n_estimators=100;, score=0.811 total time=   0.3s\n[CV 1/5] END max_depth=2, min_samples_split=2, n_estimators=200;, score=0.783 total time=   0.5s\n[CV 5/5] END max_depth=2, min_samples_split=2, n_estimators=200;, score=0.810 total time=   0.6s\n[CV 2/5] END max_depth=2, min_samples_split=5, n_estimators=200;, score=0.804 total time=   0.6s\n[CV 1/5] END max_depth=2, min_samples_split=10, n_estimators=10;, score=0.797 total time=   0.1s\n[CV 2/5] END max_depth=2, min_samples_split=10, n_estimators=10;, score=0.783 total time=   0.1s\n[CV 3/5] END max_depth=2, min_samples_split=10, n_estimators=100;, score=0.803 total time=   0.3s\n[CV 4/5] END max_depth=2, min_samples_split=10, n_estimators=100;, score=0.761 total time=   0.3s\n[CV 3/5] END max_depth=2, min_samples_split=10, n_estimators=200;, score=0.796 total time=   0.5s\n[CV 4/5] END max_depth=5, min_samples_split=2, n_estimators=10;, score=0.761 total time=   0.0s\n[CV 2/5] END max_depth=5, min_samples_split=2, n_estimators=100;, score=0.804 total time=   0.3s\n[CV 5/5] END max_depth=5, min_samples_split=2, n_estimators=100;, score=0.810 total time=   0.3s\n[CV 4/5] END max_depth=5, min_samples_split=2, n_estimators=200;, score=0.782 total time=   0.5s\n[CV 3/5] END max_depth=5, min_samples_split=5, n_estimators=100;, score=0.852 total time=   0.3s\n[CV 2/5] END max_depth=5, min_samples_split=5, n_estimators=200;, score=0.825 total time=   0.6s\n[CV 5/5] END max_depth=5, min_samples_split=5, n_estimators=200;, score=0.817 total time=   0.6s\n[CV 2/5] END max_depth=5, min_samples_split=10, n_estimators=200;, score=0.818 total time=   0.5s\n[CV 1/5] END max_depth=10, min_samples_split=2, n_estimators=10;, score=0.846 total time=   0.0s\n[CV 2/5] END max_depth=10, min_samples_split=2, n_estimators=10;, score=0.818 total time=   0.0s\n[CV 3/5] END max_depth=10, min_samples_split=2, n_estimators=10;, score=0.810 total time=   0.0s\n[CV 4/5] END max_depth=10, min_samples_split=2, n_estimators=10;, score=0.810 total time=   0.0s\n[CV 5/5] END max_depth=10, min_samples_split=2, n_estimators=10;, score=0.789 total time=   0.0s\n[CV 2/5] END max_depth=10, min_samples_split=2, n_estimators=100;, score=0.818 total time=   0.3s\n[CV 5/5] END max_depth=10, min_samples_split=2, n_estimators=100;, score=0.810 total time=   0.3s\n[CV 4/5] END max_depth=10, min_samples_split=2, n_estimators=200;, score=0.810 total time=   0.6s\n[CV 3/5] END max_depth=10, min_samples_split=5, n_estimators=100;, score=0.831 total time=   0.3s\n[CV 1/5] END max_depth=10, min_samples_split=5, n_estimators=200;, score=0.860 total time=   0.6s\n[CV 5/5] END max_depth=10, min_samples_split=5, n_estimators=200;, score=0.810 total time=   0.6s\n[CV 2/5] END max_depth=10, min_samples_split=10, n_estimators=200;, score=0.825 total time=   0.6s\n[CV 5/5] END max_depth=10, min_samples_split=10, n_estimators=200;, score=0.817 total time=   0.4s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=150; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=200; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=3, n_estimators=200; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=150; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=150; total time=   0.3s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ..learning_rate=0.05, max_depth=4, n_estimators=200; total time=   0.6s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=200; total time=   0.6s\n[CV] END ..learning_rate=0.05, max_depth=5, n_estimators=200; total time=   0.8s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=150; total time=   0.4s\n[CV] END ...learning_rate=0.1, max_depth=3, n_estimators=200; total time=   0.7s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=150; total time=   0.5s\n[CV] END ...learning_rate=0.1, max_depth=4, n_estimators=150; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.6s\n[CV] END ...learning_rate=0.1, max_depth=5, n_estimators=200; total time=   0.6s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=200; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=3, n_estimators=200; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=100; total time=   0.2s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=200; total time=   0.4s\n[CV] END ...learning_rate=0.2, max_depth=4, n_estimators=200; total time=   0.5s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=100; total time=   0.3s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=150; total time=   0.4s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=200; total time=   0.6s\n[CV] END ...learning_rate=0.2, max_depth=5, n_estimators=200; total time=   0.4s\n","output_type":"stream"}],"execution_count":75}]}